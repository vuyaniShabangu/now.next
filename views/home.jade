extends layout


block content
  input(type='hidden', name='_csrf', id='_csrf',value=_csrf)

  link(rel='stylesheet', href='../css/style.css', media='screen')
  style(media='screen').
    .containerT {
    width: 600px;
    height: 300px;
    position: relative;
    margin: 0 auto 40px;
    border-style: hidden;
    -webkit-perspective: 1100px;
    -moz-perspective: 1100px;
    -o-perspective: 1100px;
    perspective: 1100px;
    }
    #carousel {
    width: 100%;
    height: 100%;
    position: absolute;
    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    -o-transform-style: preserve-3d;
    transform-style: preserve-3d;
    }
    .ready #carousel {
    -webkit-transition: -webkit-transform 1s;
    -moz-transition: -moz-transform 1s;
    -o-transition: -o-transform 1s;
    transition: transform 1s;
    }
    #carousel.panels-backface-invisible figure {
    -webkit-backface-visibility: hidden;
    -moz-backface-visibility: hidden;
    -o-backface-visibility: hidden;
    backface-visibility: hidden;
    }
    #carousel figure {
    display: block;
    position: absolute;
    width: 500px;
    height: 480px;
    left: 10px;
    top: 10px;
    border: 2px solid black;
    line-height: 116px;
    font-size: 80px;
    font-weight: bold;
    color: white;
    text-align: center;
    }
    .ready #carousel figure {
    -webkit-transition: opacity 1s, -webkit-transform 1s;
    -moz-transition: opacity 1s, -moz-transform 1s;
    -o-transition: opacity 1s, -o-transform 1s;
    transition: opacity 1s, transform 1s;
    }
  body
    section.containerT
      #carousel
        figure
          p
            img(src='nn.svg', style='width:90%;height:90%')
            h1 presents:
          p
            img(src='lg.svg', style='width:100%;height:100%')
        figure
            img(src='drone.jpg', style='width:100%;height:100%')
        figure
          p
            h3 Plan
            p Plan a mission to be performed by a drone
            h3 Execute
            p Your planned mission will be executed by one of our operators
            h3 Report
            p Get all your mission data and media reported directly you
        figure
          p
            h3 Record videos
            h3 Count objects
            h3 Take photographs
        figure
          p
            h2 Also available on:
            img(src='Android_robot.svg.png', style='width:130px;height:130px')
          p
            img(src='Apple_logo_black.svg.png', style='width:130px;height:130px')
    section#options
      p
        input#panel-count(type='hidden', value='5')
      p#navigation
        button#previous(data-increment='-1',style="display:none") Previous
        button#next(data-increment='1',style="display:none") Next
      p
        button#toggle-axis(style="display:none")
      p
        button#toggle-backface-visibility(style="display:none")
    script(src='../js/utils.js')
    script.
      var transformProp = Modernizr.prefixed('transform');
      function Carousel3D ( el ) {
      this.element = el;
      this.rotation = 0;
      this.panelCount = 0;
      this.totalPanelCount = this.element.children.length;
      this.theta = 0;
      this.isHorizontal = true;
      }
      Carousel3D.prototype.modify = function() {
      var panel, angle, i;
      this.panelSize = this.element[ this.isHorizontal ? 'offsetWidth' : 'offsetHeight' ];
      this.rotateFn = this.isHorizontal ? 'rotateY' : 'rotateX';
      this.theta = 360 / this.panelCount;
      // do some trig to figure out how big the carousel
      // is in 3D space
      this.radius = Math.round( ( this.panelSize / 2) / Math.tan( Math.PI / this.panelCount ) );
      for ( i = 0; i < this.panelCount; i++ ) {
      panel = this.element.children[i];
      angle = this.theta * i;
      panel.style.opacity = 1;
      panel.style.backgroundColor = 'hsla(203, 67%, 82%, 0.7)';
      // rotate panel, then push it out in 3D space
      panel.style[ transformProp ] = this.rotateFn + '(' + angle + 'deg) translateZ(' + this.radius + 'px)';
      }
      // hide other panels
      for (  ; i < this.totalPanelCount; i++ ) {
      panel = this.element.children[i];
      panel.style.opacity = 0;
      panel.style[ transformProp ] = 'none';
      }
      // adjust rotation so panels are always flat
      this.rotation = Math.round( this.rotation / this.theta ) * this.theta;
      this.transform();
      };
      Carousel3D.prototype.transform = function() {
      // push the carousel back in 3D space,
      // and rotate it
      this.element.style[ transformProp ] = 'translateZ(-' + this.radius + 'px) ' + this.rotateFn + '(' + this.rotation + 'deg)';
      };
      var init = function() {
      var carousel = new Carousel3D( document.getElementById('carousel') ),
      panelCountInput = document.getElementById('panel-count'),
      axisButton = document.getElementById('toggle-axis'),
      navButtons = document.querySelectorAll('#navigation button'),
      onNavButtonClick = function(){
      var increment = 1;
      carousel.rotation += carousel.theta * increment * -1;
      carousel.transform();
      };
      var carousel = new Carousel3D( document.getElementById('carousel') );
      setInterval(function(){
        var increment = 1;
        carousel.rotation += carousel.theta * increment * -1;
        carousel.transform();
      },3000);
      // populate on startup
      carousel.panelCount = 5;
      carousel.modify();
      axisButton.addEventListener( 'click', function(){
      carousel.isHorizontal = !carousel.isHorizontal;
      carousel.modify();
      }, false);
      panelCountInput.addEventListener( 'change', function( event ) {
      carousel.panelCount = event.target.value;
      carousel.modify();
      }, false);
      for (var i=0; i < 2; i++) {
      navButtons[i].addEventListener( 'click', onNavButtonClick, false);
      }
      document.getElementById('toggle-backface-visibility').addEventListener( 'click', function(){
      carousel.element.toggleClassName('panels-backface-invisible');
      }, false);
      setTimeout( function(){
      document.body.addClassName('ready');
      }, 0);
      };
      window.addEventListener( 'DOMContentLoaded', init, false);
